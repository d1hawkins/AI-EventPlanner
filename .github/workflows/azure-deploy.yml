name: Deploy to Azure

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --without google --no-root || (sleep 10 && poetry install --without google --no-root)
        # Install additional test dependencies to fix CI issues
        pip install psutil email-validator
    
    - name: Create .env.test if missing and run tests
      run: |
        # Check if .env.test exists, if not create it
        if [ ! -f .env.test ]; then
          echo "Warning: .env.test not found. Creating default test environment file..."
          cat > .env.test << 'EOF'
        # AI Event Planner Test Environment Variables
        
        # OpenAI API Configuration (Required for real agents)
        OPENAI_API_KEY=sk-test-placeholder-for-testing
        
        # LLM Configuration
        LLM_MODEL=gpt-4
        LLM_PROVIDER=openai
        
        # Optional API Keys for enhanced functionality (use test/placeholder values)
        TAVILY_API_KEY=test_tavily_api_key_here
        GOOGLE_API_KEY=test_google_api_key_here
        SENDGRID_API_KEY=test_sendgrid_api_key_here
        OPENWEATHER_API_KEY=test_openweather_api_key_here
        
        # Database Configuration (Use in-memory SQLite for tests)
        DATABASE_URL=sqlite:///:memory:
        
        # Application Configuration
        SECRET_KEY=test_secret_key_for_testing_only
        DEBUG=false
        ENVIRONMENT=test
        
        # Server Configuration
        HOST=0.0.0.0
        PORT=8000
        EOF
        fi
        
        # Copy .env.test to .env for running tests
        cp .env.test .env
        
        # Export environment variables for tests
        set -a
        source .env
        set +a
        
        # Create mock MCP server file to prevent test failures
        mkdir -p mcp-servers/sendgrid-mcp/build
        echo "module.exports = {};" > mcp-servers/sendgrid-mcp/build/index.js
        
        # Run tests with CI optimizations for faster execution
        CI=true poetry run pytest -x --tb=short --disable-warnings -q
    
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/ai-event-planner:${{ github.sha }} .
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/ai-event-planner:${{ github.sha }}
    
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'ai-event-planner'
        images: '${{ secrets.ACR_LOGIN_SERVER }}/ai-event-planner:${{ github.sha }}'
    
    - name: Run database migrations
      run: |
        # Get publishing credentials
        CREDS=$(az webapp deployment list-publishing-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ai-event-planner --query "{username:publishingUserName, password:publishingPassword}" -o json)
        USERNAME=$(echo $CREDS | jq -r '.username')
        PASSWORD=$(echo $CREDS | jq -r '.password')
        
        # First, find the Python executable path
        echo "Finding Python executable path..."
        FIND_PYTHON_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST -u "$USERNAME:$PASSWORD" \
          -H "Content-Type: application/json" \
          https://ai-event-planner.scm.azurewebsites.net/api/command \
          -d "{\"command\":\"find / -name python3 2>/dev/null | head -n 1\", \"dir\":\"/\"}")
        
        # Extract status code and response body
        FIND_PYTHON_HTTP_STATUS=$(echo "$FIND_PYTHON_RESPONSE" | tail -n1)
        FIND_PYTHON_BODY=$(echo "$FIND_PYTHON_RESPONSE" | sed '$d')
        
        echo "Find Python response: $FIND_PYTHON_BODY"
        echo "HTTP status: $FIND_PYTHON_HTTP_STATUS"
        
        # Extract Python path from the response
        PYTHON_PATH=$(echo "$FIND_PYTHON_BODY" | grep -o '/[a-zA-Z0-9/_.-]*python3' | head -n 1 || echo "")
        
        if [ -z "$PYTHON_PATH" ]; then
          echo "Python path not found, using default /usr/local/bin/python3"
          PYTHON_PATH="/usr/local/bin/python3"
        else
          echo "Found Python path: $PYTHON_PATH"
        fi
        
        # Use the Python path to run the migration script
        echo "Running migrations..."
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST -u "$USERNAME:$PASSWORD" \
          -H "Content-Type: application/json" \
          https://ai-event-planner.scm.azurewebsites.net/api/command \
          -d "{\"command\":\"$PYTHON_PATH -m scripts.migrate\", \"dir\":\"/home/site/wwwroot\"}")
        
        # Extract status code and response body
        HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
        RESPONSE_BODY=$(echo "$RESPONSE" | sed '$d')
        
        echo "Migration response: $RESPONSE_BODY"
        echo "HTTP status: $HTTP_STATUS"
        
        # Check if the request was successful
        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "Migration failed with status $HTTP_STATUS"
          echo "Response: $RESPONSE_BODY"
          exit 1
        fi
        
        # Check if the response contains error messages
        if echo "$RESPONSE_BODY" | grep -i "error"; then
          echo "Migration script reported errors"
          exit 1
        fi
        
        echo "Migration completed successfully"
