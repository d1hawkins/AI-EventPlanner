name: Deploy AI Event Planner SaaS to Azure

on:
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - 'migrations/**'
      - 'alembic.ini'
      - 'requirements.txt'
      - '.github/workflows/azure-deploy-saas.yml'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --without google --no-root || (sleep 10 && poetry install --without google --no-root)
        # Install additional test dependencies to fix CI issues
        pip install psutil email-validator
    
    - name: Create .env.test if missing and run tests
      run: |
        # Check if .env.test exists, if not create it
        if [ ! -f .env.test ]; then
          echo "Warning: .env.test not found. Creating default test environment file..."
          cat > .env.test << 'EOF'
        # AI Event Planner Test Environment Variables
        
        # OpenAI API Configuration (Required for real agents)
        OPENAI_API_KEY=sk-test-placeholder-for-testing
        
        # LLM Configuration
        LLM_MODEL=gpt-4
        LLM_PROVIDER=openai
        
        # Optional API Keys for enhanced functionality (use test/placeholder values)
        TAVILY_API_KEY=test_tavily_api_key_here
        GOOGLE_API_KEY=test_google_api_key_here
        SENDGRID_API_KEY=test_sendgrid_api_key_here
        OPENWEATHER_API_KEY=test_openweather_api_key_here
        
        # Database Configuration (Use in-memory SQLite for tests)
        DATABASE_URL=sqlite:///:memory:
        
        # Application Configuration
        SECRET_KEY=test_secret_key_for_testing_only
        DEBUG=false
        ENVIRONMENT=test
        
        # Server Configuration
        HOST=0.0.0.0
        PORT=8000
        EOF
        fi
        
        # Copy .env.test to .env for running tests
        cp .env.test .env
        
        # Export environment variables for tests
        set -a
        source .env
        set +a
        
        # Create mock MCP server file to prevent test failures
        mkdir -p mcp-servers/sendgrid-mcp/build
        echo "module.exports = {};" > mcp-servers/sendgrid-mcp/build/index.js
        
        # Run tests with CI optimizations for faster execution
        CI=true poetry run pytest -x --tb=short --disable-warnings -q
    
    - name: Verify required secrets are available
      env:
        AZURE_LOCATION: ${{ secrets.AZURE_LOCATION }}
        AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "=== Checking required GitHub secrets ==="
        MISSING_SECRETS=()
        
        if [ -z "${AZURE_RESOURCE_GROUP:-}" ]; then
          echo "❌ ERROR: AZURE_RESOURCE_GROUP secret is not set"
          MISSING_SECRETS+=("AZURE_RESOURCE_GROUP")
        else
          echo "✅ AZURE_RESOURCE_GROUP is available: $AZURE_RESOURCE_GROUP"
        fi
        
        if [ -z "${AZURE_LOCATION:-}" ]; then
          echo "❌ ERROR: AZURE_LOCATION secret is not set"
          MISSING_SECRETS+=("AZURE_LOCATION")
        else
          echo "✅ AZURE_LOCATION is available: $AZURE_LOCATION"
        fi
        
        if [ -z "${AZURE_CREDENTIALS:-}" ]; then
          echo "❌ ERROR: AZURE_CREDENTIALS secret is not set"
          MISSING_SECRETS+=("AZURE_CREDENTIALS")
        else
          echo "✅ AZURE_CREDENTIALS is available (length: ${#AZURE_CREDENTIALS})"
        fi
        
        if [ -z "${DATABASE_URL:-}" ]; then
          echo "❌ ERROR: DATABASE_URL secret is not set"
          MISSING_SECRETS+=("DATABASE_URL")
        else
          echo "✅ DATABASE_URL is available"
        fi
        
        if [ -z "${SECRET_KEY:-}" ]; then
          echo "❌ ERROR: SECRET_KEY secret is not set"
          MISSING_SECRETS+=("SECRET_KEY")
        else
          echo "✅ SECRET_KEY is available"
        fi
        
        if [ -z "${OPENAI_API_KEY:-}" ]; then
          echo "❌ ERROR: OPENAI_API_KEY secret is not set"
          MISSING_SECRETS+=("OPENAI_API_KEY")
        else
          echo "✅ OPENAI_API_KEY is available"
        fi
        
        if [ ${#MISSING_SECRETS[@]} -gt 0 ]; then
          echo ""
          echo "=== DEPLOYMENT FAILED: Missing Required Secrets ==="
          echo "Please add the following secrets to your GitHub repository:"
          echo "Repository Settings → Secrets and variables → Actions"
          echo ""
          for secret in "${MISSING_SECRETS[@]}"; do
            case $secret in
              "AZURE_RESOURCE_GROUP")
                echo "• $secret: Your Azure resource group name (e.g., 'ai-event-planner-rg')"
                ;;
              "AZURE_LOCATION")
                echo "• $secret: Your Azure location (e.g., 'eastus', 'westus2')"
                ;;
              "AZURE_CREDENTIALS")
                echo "• $secret: Azure service principal credentials JSON (see Azure docs)"
                ;;
              "DATABASE_URL")
                echo "• $secret: PostgreSQL connection string for Azure Database"
                ;;
              "SECRET_KEY")
                echo "• $secret: Application secret key for JWT tokens"
                ;;
              "OPENAI_API_KEY")
                echo "• $secret: OpenAI API key starting with 'sk-'"
                ;;
            esac
          done
          echo ""
          echo "For help setting up these secrets, see the AZURE_DEPLOYMENT_SETUP_GUIDE.md"
          exit 1
        fi
        
        echo "✅ All required secrets are available"
    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Ensure Azure Web App exists with Python 3.10 runtime
      run: |
        set -euo pipefail

        # Use secrets (required now due to earlier validation)
        RG="${{ secrets.AZURE_RESOURCE_GROUP }}"
        DESIRED_LOCATION="${{ secrets.AZURE_LOCATION }}"
        APP_NAME="ai-event-planner-saas-py"
        PLAN_NAME="ai-event-planner-plan"
        SKU="B1"

        echo "=== Setting up Azure Web App with Python 3.10 ==="
        echo "Resource Group: $RG"
        echo "Location: $DESIRED_LOCATION"
        echo "App Name: $APP_NAME"

        if az group show --name "$RG" >/dev/null 2>&1; then
          EXISTING_LOCATION=$(az group show --name "$RG" --query location -o tsv)
          echo "✅ Resource group '$RG' exists in location: $EXISTING_LOCATION"

          if [ "$DESIRED_LOCATION" != "$EXISTING_LOCATION" ]; then
            echo "⚠️ Warning: Desired location ($DESIRED_LOCATION) differs from existing group location ($EXISTING_LOCATION)"
            echo "Using existing resource group location: $EXISTING_LOCATION"
            LOCATION="$EXISTING_LOCATION"
          else
            LOCATION="$DESIRED_LOCATION"
          fi
        else
          echo "Creating resource group '$RG' in location: $DESIRED_LOCATION"
          az group create --name "$RG" --location "$DESIRED_LOCATION"
          LOCATION="$DESIRED_LOCATION"
          echo "✅ Resource group created"
        fi

        # Create App Service plan if missing (Linux plan)
        if ! az appservice plan show --name "$PLAN_NAME" --resource-group "$RG" >/dev/null 2>&1; then
          echo "Creating App Service plan: $PLAN_NAME (Linux, SKU: $SKU)"
          az appservice plan create --name "$PLAN_NAME" --resource-group "$RG" --sku "$SKU" --is-linux
          echo "✅ App Service plan created"
        else
          echo "✅ App Service plan '$PLAN_NAME' already exists"
        fi

        # Create or update the web app with Python 3.10
        if ! az webapp show --name "$APP_NAME" --resource-group "$RG" >/dev/null 2>&1; then
          echo "Creating Web app: $APP_NAME with Python 3.10"
          az webapp create --resource-group "$RG" --plan "$PLAN_NAME" --name "$APP_NAME" --runtime "PYTHON|3.10"
          echo "✅ Web app created with Python 3.10 runtime"
        else
          echo "✅ Web app '$APP_NAME' already exists"
          
          # Ensure runtime is set to Python 3.10 even for existing apps
          CURRENT_RUNTIME=$(az webapp config show --name "$APP_NAME" --resource-group "$RG" --query linuxFxVersion -o tsv)
          echo "Current runtime: $CURRENT_RUNTIME"
          
          if [[ "$CURRENT_RUNTIME" != "PYTHON|3.10" ]]; then
            echo "⚠️ Runtime is not Python 3.10, updating..."
            az webapp config set --name "$APP_NAME" --resource-group "$RG" --linux-fx-version "PYTHON|3.10"
            
            # Verify the change took effect
            sleep 15
            UPDATED_RUNTIME=$(az webapp config show --name "$APP_NAME" --resource-group "$RG" --query linuxFxVersion -o tsv)
            
            if [[ "$UPDATED_RUNTIME" != "PYTHON|3.10" ]]; then
              echo "❌ ERROR: Failed to set Python runtime to PYTHON|3.10"
              echo "Expected: PYTHON|3.10, Got: $UPDATED_RUNTIME"
              exit 1
            fi
            
            echo "✅ Runtime successfully updated to Python 3.10"
          else
            echo "✅ Runtime is already correctly set to Python 3.10"
          fi
        fi
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env.azure
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env.azure
        echo "STORAGE_CONNECTION_STRING=${{ secrets.STORAGE_CONNECTION_STRING }}" >> .env.azure
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env.azure
        echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> .env.azure
    
    - name: Create deployment package
      run: |
        set -euxo pipefail

        mkdir -p deploy

        # Copy app, migrations if present
        if [ -d app ]; then
          cp -r app deploy/ || true
        else
          echo "❌ app/ directory not found" >&2
          exit 1
        fi

        if [ -d migrations ]; then
          cp -r migrations deploy/ || true
        else
          echo "❌ migrations/ directory not found" >&2
          exit 1
        fi

        # Ensure scripts are included - create deploy/scripts if needed
        mkdir -p deploy/scripts
        
        # Copy scripts directory contents if it exists
        if [ -d scripts ]; then
          cp -r scripts/* deploy/scripts/ || true
        fi

        # Verify critical migration scripts are present
        if [ ! -f deploy/scripts/migrate.py ]; then
          echo "❌ ERROR: deploy/scripts/migrate.py not found after copy - migrations will fail" >&2
          exit 1
        fi

        if [ ! -f deploy/scripts/run_azure_migration_comprehensive.py ]; then
          echo "⚠️  WARNING: deploy/scripts/run_azure_migration_comprehensive.py not found - will fallback to basic migration" >&2
        else
          echo "✅ Comprehensive migration script found"
        fi

        # Copy other required files
        cp alembic.ini deploy/ || true
        cp requirements.txt deploy/ || true
        cp startup.sh deploy/ || true
        chmod +x deploy/startup.sh || true

        # Create zip and list contents for debugging
        cd deploy
        zip -r ../deploy.zip .
        cd ..
        
        echo "=== deploy.zip contents ==="
        unzip -l deploy.zip
        
        echo ""
        echo "=== Key files verification ==="
        if unzip -l deploy.zip | grep -q "scripts/migrate.py"; then
          echo "✅ scripts/migrate.py found in zip"
        else
          echo "❌ ERROR: migrate.py not found in zip!" >&2
          exit 1
        fi
        
        echo "✅ Deployment package created successfully"
    
    - name: Stop Azure Web App before deployment
      run: |
        echo "Stopping Web App to prevent deployment conflicts..."
        az webapp stop --name ai-event-planner-saas-py --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" || echo "Web App may already be stopped"

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'ai-event-planner-saas-py'
        slot-name: 'production'
        package: './deploy.zip'

    - name: Configure Azure Web App
      run: |
        # Use the startup.sh script
        az webapp config set --name ai-event-planner-saas-py --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" --startup-file "./startup.sh"
        
        # Set essential environment variables with fallbacks
        az webapp config appsettings set --name ai-event-planner-saas-py --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" --settings \
          "DATABASE_URL=${{ secrets.DATABASE_URL }}" \
          "SECRET_KEY=${{ secrets.SECRET_KEY }}" \
          "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" \
          "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" \
          "TAVILY_API_KEY=${{ secrets.TAVILY_API_KEY }}" \
          "LLM_PROVIDER=openai" \
          "LLM_MODEL=gpt-4" \
          "HOST=0.0.0.0" \
          "PORT=8000" \
          "ENVIRONMENT=production" \
          "PYTHONPATH=/home/site/wwwroot"
    
    - name: Verify Python Runtime Configuration
      run: |
        echo "Verifying Azure Web App Python runtime configuration..."
        
        # Check current runtime version
        CURRENT_RUNTIME=$(az webapp config show --name ai-event-planner-saas-py --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" --query linuxFxVersion -o tsv)
        echo "Current runtime: $CURRENT_RUNTIME"
        
        # Ensure it's set to Python 3.10
        if [[ "$CURRENT_RUNTIME" != "PYTHON|3.10" ]]; then
          echo "Runtime is not set to PYTHON|3.10. Updating..."
          az webapp config set --name ai-event-planner-saas-py --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" --linux-fx-version "PYTHON|3.10"
          
          # Wait a moment for the configuration to take effect
          echo "Waiting 30 seconds for runtime configuration to take effect..."
          sleep 30
          
          # Verify the change
          UPDATED_RUNTIME=$(az webapp config show --name ai-event-planner-saas-py --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" --query linuxFxVersion -o tsv)
          echo "Updated runtime: $UPDATED_RUNTIME"
          
          if [[ "$UPDATED_RUNTIME" != "PYTHON|3.10" ]]; then
            echo "ERROR: Failed to set Python runtime to PYTHON|3.10"
            echo "Current runtime is still: $UPDATED_RUNTIME"
            exit 1
          fi
          
          echo "Successfully updated runtime to PYTHON|3.10"
        else
          echo "Runtime is already correctly set to PYTHON|3.10"
        fi

    - name: Verify deployed files on Kudu
      run: |
        set -euo pipefail
        
        echo "=== Verifying Deployed Files on Azure Web App ==="
        
        USERNAME=$(az webapp deployment list-publishing-credentials --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" --name ai-event-planner-saas-py --query publishingUserName -o tsv)
        PASSWORD=$(az webapp deployment list-publishing-credentials --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" --name ai-event-planner-saas-py --query publishingPassword -o tsv)
        
        if [ -z "$USERNAME" ] || [ -z "$PASSWORD" ]; then
          echo "❌ ERROR: Failed to retrieve deployment credentials for file verification"
          echo "Cannot verify deployed files - proceeding with migration attempt"
        else
          echo "✅ Got deployment credentials for file verification"
          
          echo "📁 Listing /site/wwwroot root directory:"
          ROOT_RESPONSE=$(curl -s -u "$USERNAME:$PASSWORD" https://ai-event-planner-saas-py.scm.azurewebsites.net/api/vfs/site/wwwroot/ || echo "ERROR_FETCHING_ROOT")
          
          if [[ "$ROOT_RESPONSE" == "ERROR_FETCHING_ROOT" ]]; then
            echo "❌ Failed to fetch root directory listing"
          else
            echo "$ROOT_RESPONSE" | sed -n '1,50p'  # Show first 50 lines to avoid overflow
          fi
          
          echo ""
          echo "📁 Checking for scripts directory:"
          SCRIPTS_RESPONSE=$(curl -s -u "$USERNAME:$PASSWORD" https://ai-event-planner-saas-py.scm.azurewebsites.net/api/vfs/site/wwwroot/scripts/ || echo "ERROR_FETCHING_SCRIPTS")
          
          if [[ "$SCRIPTS_RESPONSE" == "ERROR_FETCHING_SCRIPTS" ]]; then
            echo "❌ scripts/ directory not found or inaccessible"
          else
            echo "✅ scripts/ directory found. Contents:"
            echo "$SCRIPTS_RESPONSE" | sed -n '1,20p'  # Show first 20 lines
            
            # Check specifically for migrate.py
            if echo "$SCRIPTS_RESPONSE" | grep -q "migrate.py"; then
              echo "✅ migrate.py found in scripts directory"
            else
              echo "❌ WARNING: migrate.py NOT found in scripts directory"
            fi
          fi
          
          echo ""
          echo "📁 Checking for other key directories:"
          
          # Check app directory
          APP_RESPONSE=$(curl -s -u "$USERNAME:$PASSWORD" https://ai-event-planner-saas-py.scm.azurewebsites.net/api/vfs/site/wwwroot/app/ || echo "ERROR_FETCHING_APP")
          if [[ "$APP_RESPONSE" != "ERROR_FETCHING_APP" ]]; then
            echo "✅ app/ directory exists"
          else
            echo "❌ app/ directory not found"
          fi
          
          # Check migrations directory
          MIGRATIONS_RESPONSE=$(curl -s -u "$USERNAME:$PASSWORD" https://ai-event-planner-saas-py.scm.azurewebsites.net/api/vfs/site/wwwroot/migrations/ || echo "ERROR_FETCHING_MIGRATIONS")
          if [[ "$MIGRATIONS_RESPONSE" != "ERROR_FETCHING_MIGRATIONS" ]]; then
            echo "✅ migrations/ directory exists"
          else
            echo "❌ migrations/ directory not found"
          fi
        fi
        
        echo "=== File verification complete ==="
    
    - name: Run database migrations with comprehensive script
      run: |
        echo "=== Running Database Migrations ==="

        echo "Getting Azure Web App deployment credentials..."
        USERNAME=$(az webapp deployment list-publishing-credentials --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" --name ai-event-planner-saas-py --query publishingUserName -o tsv)
        PASSWORD=$(az webapp deployment list-publishing-credentials --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" --name ai-event-planner-saas-py --query publishingPassword -o tsv)

        if [ -z "$USERNAME" ] || [ -z "$PASSWORD" ]; then
          echo "❌ ERROR: Failed to retrieve deployment credentials"
          echo "Ensure the web app is deployed and accessible"
          exit 1
        fi

        echo "✅ Deployment credentials retrieved successfully"

        # Try multiple approaches to find Python
        echo "🔍 Searching for Python 3.10 executable..."

        # First, try standard Python 3.10 paths for Azure App Service
        PYTHON_CANDIDATES=(
          "/opt/python/3.10.*/bin/python3"
          "/usr/bin/python3.10"
          "/usr/local/bin/python3.10"
          "/usr/bin/python3"
          "/home/site/wwwroot/antenv/bin/python"
          "python3"
        )

        PYTHON_PATH=""
        for candidate in "${PYTHON_CANDIDATES[@]}"; do
          echo "Testing Python path: $candidate"

          TEST_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST -u "$USERNAME:$PASSWORD" \
            -H "Content-Type: application/json" \
            https://ai-event-planner-saas-py.scm.azurewebsites.net/api/command \
            -d "{\"command\":\"$candidate --version\", \"dir\":\"/home/site/wwwroot\"}" || echo -e "\nERROR")

          TEST_HTTP_STATUS=$(echo "$TEST_RESPONSE" | tail -n1)
          TEST_BODY=$(echo "$TEST_RESPONSE" | sed '$d')

          if [ "$TEST_HTTP_STATUS" = "200" ] && echo "$TEST_BODY" | grep -q "Python 3"; then
            echo "✅ Found working Python: $candidate"
            PYTHON_PATH="$candidate"
            break
          fi
        done

        if [ -z "$PYTHON_PATH" ]; then
          echo "❌ ERROR: Could not find a working Python 3 executable"
          echo ""
          echo "🔧 Troubleshooting steps:"
          echo "1. Verify that Python 3.10 runtime is set:"
          echo "   az webapp config show --name ai-event-planner-saas-py --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query linuxFxVersion"
          echo ""
          echo "2. Check if the app has been deployed successfully"
          echo ""
          echo "3. Manually set the runtime if needed:"
          echo "   az webapp config set --name ai-event-planner-saas-py --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --linux-fx-version 'PYTHON|3.10'"
          echo ""
          exit 1
        fi

        echo "🚀 Running comprehensive database migration with Python: $PYTHON_PATH"

        # First, check which migration script is available and install dependencies if needed
        CHECK_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST -u "$USERNAME:$PASSWORD" \
          -H "Content-Type: application/json" \
          https://ai-event-planner-saas-py.scm.azurewebsites.net/api/command \
          -d "{\"command\":\"bash -c \\\"if [ -f /home/site/wwwroot/scripts/run_azure_migration_comprehensive.py ]; then echo COMPREHENSIVE_FOUND; elif [ -f /home/site/wwwroot/scripts/migrate.py ]; then echo BASIC_FOUND; else echo NONE_FOUND; fi\\\"\", \"dir\":\"/home/site/wwwroot\"}")

        CHECK_BODY=$(echo "$CHECK_RESPONSE" | sed '$d')
        echo "Migration script check: $CHECK_BODY"

        # Try comprehensive migration first, then fallback to basic migration
        if echo "$CHECK_BODY" | grep -q "COMPREHENSIVE_FOUND"; then
          echo "✅ Using comprehensive migration script with retry logic and validation"

          MIGRATION_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST -u "$USERNAME:$PASSWORD" \
            -H "Content-Type: application/json" \
            https://ai-event-planner-saas-py.scm.azurewebsites.net/api/command \
            -d "{\"command\":\"cd /home/site/wwwroot && $PYTHON_PATH scripts/run_azure_migration_comprehensive.py --max-retries 3 --retry-delay 5 2>&1\", \"dir\":\"/home/site/wwwroot\"}")
        elif echo "$CHECK_BODY" | grep -q "BASIC_FOUND"; then
          echo "⚠️  Using basic migration script (comprehensive script not found)"

          MIGRATION_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST -u "$USERNAME:$PASSWORD" \
            -H "Content-Type: application/json" \
            https://ai-event-planner-saas-py.scm.azurewebsites.net/api/command \
            -d "{\"command\":\"cd /home/site/wwwroot && $PYTHON_PATH -m scripts.migrate 2>&1\", \"dir\":\"/home/site/wwwroot\"}")
        else
          echo "❌ ERROR: No migration script found in /home/site/wwwroot/scripts/"
          exit 1
        fi

        MIGRATION_HTTP_STATUS=$(echo "$MIGRATION_RESPONSE" | tail -n1)
        MIGRATION_BODY=$(echo "$MIGRATION_RESPONSE" | sed '$d')

        echo ""
        echo "=== Migration Output ==="
        echo "$MIGRATION_BODY"
        echo "======================="
        echo ""
        echo "Migration HTTP Status: $MIGRATION_HTTP_STATUS"

        if [ "$MIGRATION_HTTP_STATUS" != "200" ]; then
          echo "❌ ERROR: Migration request failed with HTTP status $MIGRATION_HTTP_STATUS"
          exit 1
        fi

        # Check for common error patterns in the response
        if echo "$MIGRATION_BODY" | grep -iE "error.*running.*migration|migration.*failed|traceback \(most recent call last\)"; then
          echo "❌ ERROR: Migration script reported errors"
          echo ""
          echo "Migration will be retried automatically by the startup script when the app starts."
          echo "Check the application logs for more details."
          exit 1
        fi

        # Check for success indicators
        if echo "$MIGRATION_BODY" | grep -qE "✅|completed successfully|Migrations completed"; then
          echo "✅ Database migration completed successfully"
        else
          echo "⚠️  Migration response doesn't contain clear success indicator"
          echo "Migration will be verified by the startup script when the app starts."
        fi
    
    - name: Start Azure Web App after deployment
      run: |
        echo "Starting Web App after deployment..."
        az webapp start --name ai-event-planner-saas-py --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}"
        echo "Web App started successfully"
    
    - name: Logout from Azure
      run: |
        # Check if there are active accounts before logging out
        if az account show &>/dev/null; then
          echo "Logging out from Azure..."
          az logout
        else
          echo "No active Azure sessions to logout from"
        fi
      if: always()
    
    - name: Cleanup
      run: |
        rm -rf deploy
        rm -f deploy.zip
      if: always()
