{
  "node_version": "20",
  "dependencies": [],
  "metadata": {
    "name": "Event Planning Coordinator",
    "description": "A LangGraph for an event planning coordinator agent that interfaces with users, gathers requirements, creates proposals, delegates tasks, and monitors progress.",
    "version": "1.0.0"
  },
  "imports": [
    "from typing import Dict, List, Any, TypedDict, Literal, Optional",
    "from datetime import datetime",
    "from langchain_openai import ChatOpenAI",
    "from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder",
    "from langchain_core.messages import HumanMessage, AIMessage, SystemMessage",
    "from app.config import OPENAI_API_KEY, LLM_MODEL",
    "from app.tools.event_tools import RequirementsTool, DelegationTool, MonitoringTool, ReportingTool"
  ],
  "globals": {
    "COORDINATOR_SYSTEM_PROMPT": "You are the Frontend Coordinator Agent for an event planning system. Your role is to:\n\n1. Interface with users to understand their event planning needs\n2. Gather comprehensive requirements for events\n3. Create detailed event proposals\n4. Delegate tasks to specialized agents\n5. Monitor progress and provide status updates\n6. Ensure a cohesive event planning experience\n\nYou have access to the following specialized agents:\n- Resource Planning Agent: Handles venue selection, service providers, equipment\n- Financial Agent: Manages budget, payments, contracts\n- Stakeholder Management Agent: Coordinates sponsors, speakers, volunteers\n- Marketing & Communications Agent: Manages campaigns, website, attendee communications\n- Project Management Agent: Tracks tasks, timeline, risks\n- Analytics Agent: Collects data, analyzes performance\n- Compliance & Security Agent: Ensures legal requirements, security protocols\n\nYour current conversation state:\nCurrent phase: {current_phase}\nEvent details: {event_details}\nRequirements: {requirements}\nAgent assignments: {agent_assignments}\nNext steps: {next_steps}\nInformation collected: {information_collected}\n\nIMPORTANT: Your primary goal is to collect comprehensive information about the event before creating a proposal. Follow these guidelines:\n\n1. If this is a new conversation, begin by explaining your role and asking about the basic event details.\n2. Systematically collect information in all required categories (see information_collected status).\n3. Ask focused questions to gather missing information.\n4. Once all required information is collected, generate a comprehensive proposal.\n5. Ask the user for approval on the proposal before proceeding.\n6. Make revisions to the proposal if needed.\n7. After the proposal is approved, create a detailed comprehensive project plan.\n8. Ask the user for approval on the project plan before proceeding.\n9. Delegate tasks to specialized agents based on the project plan.\n\nRespond to the user in a helpful, professional manner. Ask clarifying questions when needed to gather complete requirements. Provide clear updates on the event planning progress.",
    "INFORMATION_CATEGORIES": [
      "basic_details",
      "timeline",
      "budget",
      "location",
      "stakeholders",
      "resources",
      "success_criteria",
      "risks"
    ]
  },
  "state_schema": {
    "type": "object",
    "title": "CoordinatorStateDict",
    "description": "State for the coordinator agent",
    "properties": {
      "messages": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "role": {"type": "string"},
            "content": {"type": "string"},
            "ephemeral": {"type": "boolean", "optional": true}
          }
        },
        "description": "Conversation messages"
      },
      "event_details": {
        "type": "object",
        "properties": {
          "event_type": {"type": ["string", "null"]},
          "title": {"type": ["string", "null"]},
          "description": {"type": ["string", "null"]},
          "attendee_count": {"type": ["number", "null"]},
          "scale": {"type": ["string", "null"]},
          "timeline_start": {"type": ["string", "null"]},
          "timeline_end": {"type": ["string", "null"]}
        },
        "description": "Details about the event"
      },
      "requirements": {
        "type": "object",
        "properties": {
          "stakeholders": {"type": "array", "items": {"type": "string"}},
          "resources": {"type": "array", "items": {"type": "string"}},
          "success_criteria": {"type": "array", "items": {"type": "string"}},
          "risks": {"type": "array", "items": {"type": "string"}},
          "budget": {"type": "object"},
          "location": {"type": "object"}
        },
        "description": "Requirements for the event"
      },
      "agent_assignments": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "agent_type": {"type": "string"},
            "task": {"type": "string"},
            "status": {"type": "string"},
            "assigned_at": {"type": "string"}
          }
        },
        "description": "Tasks assigned to specialized agents"
      },
      "current_phase": {
        "type": "string",
        "description": "Current phase of the event planning process"
      },
      "next_steps": {
        "type": "array",
        "items": {"type": "string"},
        "description": "Next steps in the event planning process"
      },
      "proposal": {
        "type": ["object", "null"],
        "properties": {
          "content": {"type": "string"},
          "generated_at": {"type": "string"},
          "status": {"type": "string"}
        },
        "description": "Event proposal"
      },
      "information_collected": {
        "type": "object",
        "properties": {
          "basic_details": {"type": "boolean"},
          "timeline": {"type": "boolean"},
          "budget": {"type": "boolean"},
          "location": {"type": "boolean"},
          "stakeholders": {"type": "boolean"},
          "resources": {"type": "boolean"},
          "success_criteria": {"type": "boolean"},
          "risks": {"type": "boolean"}
        },
        "description": "Status of information collection"
      },
      "next_action": {
        "type": "string",
        "description": "Next action to take"
      }
    },
    "required": [
      "messages",
      "event_details",
      "requirements",
      "agent_assignments",
      "current_phase",
      "next_steps",
      "information_collected"
    ]
  },
  "nodes": {
    "assess_request": {
      "type": "function",
      "description": "Assess the user's request and determine the next action",
      "function": {
        "name": "assess_request",
        "description": "Assess the user's request and determine the next action",
        "parameters": {
          "type": "object",
          "properties": {
            "state": {
              "type": "object",
              "description": "Current state"
            }
          },
          "required": ["state"]
        },
        "implementation": "def assess_request(state):\n    # Get the last message\n    last_message = state[\"messages\"][-1][\"content\"] if state[\"messages\"] else \"\"\n    current_phase = state[\"current_phase\"]\n    \n    # For new conversations or initial messages, always start with information gathering\n    if len(state[\"messages\"]) <= 1:  # Only system message or first user message\n        state[\"current_phase\"] = \"information_collection\"\n        state[\"next_action\"] = \"gather_requirements\"\n        return state\n    \n    # Check if all information has been collected\n    all_info_collected = all(state[\"information_collected\"].values())\n    \n    # Check if we need to generate a proposal - only if ALL information is collected\n    if all_info_collected and current_phase == \"information_collection\" and \"proposal\" not in state:\n        # Double check that we have meaningful information before generating proposal\n        has_meaningful_info = (\n            state[\"event_details\"][\"event_type\"] is not None and\n            state[\"event_details\"][\"title\"] is not None and\n            (state[\"event_details\"][\"timeline_start\"] is not None or \n             state[\"event_details\"][\"timeline_end\"] is not None)\n        )\n        \n        if has_meaningful_info:\n            state[\"next_action\"] = \"generate_proposal\"\n            return state\n        else:\n            # If we don't have meaningful info, continue gathering requirements\n            state[\"next_action\"] = \"gather_requirements\"\n            return state\n        \n    # Check if proposal has been approved\n    if current_phase == \"proposal_review\" and any(keyword in last_message.lower() for keyword in [\"approve\", \"approved\", \"accept\", \"accepted\", \"good\", \"proceed\", \"go ahead\"]):\n        state[\"current_phase\"] = \"task_delegation\"\n        state[\"next_action\"] = \"delegate_tasks\"\n        return state\n        \n    # Simple keyword-based routing\n    if any(keyword in last_message.lower() for keyword in [\"what type\", \"when is\", \"how many\", \"requirements\", \"details\", \"information\"]):\n        state[\"next_action\"] = \"gather_requirements\"\n    elif any(keyword in last_message.lower() for keyword in [\"assign\", \"delegate\", \"task\", \"responsibility\"]):\n        state[\"next_action\"] = \"delegate_tasks\"\n    elif any(keyword in last_message.lower() for keyword in [\"status\", \"progress\", \"update\", \"report\"]):\n        state[\"next_action\"] = \"provide_status\"\n    elif any(keyword in last_message.lower() for keyword in [\"proposal\", \"plan\", \"summary\"]) and current_phase != \"proposal_review\":\n        # Only generate proposal if explicitly requested AND we have some information\n        if any(state[\"information_collected\"].values()):\n            state[\"next_action\"] = \"generate_proposal\"\n        else:\n            state[\"next_action\"] = \"gather_requirements\"\n    else:\n        # Default to gather requirements if we're still collecting information\n        if not all_info_collected and (current_phase == \"information_collection\" or current_phase == \"initial_assessment\"):\n            state[\"next_action\"] = \"gather_requirements\"\n        else:\n            # Default to generate response\n            state[\"next_action\"] = \"generate_response\"\n    \n    return state"
      }
    },
    "gather_requirements": {
      "type": "function",
      "description": "Gather event requirements",
      "function": {
        "name": "gather_requirements",
        "description": "Gather event requirements",
        "parameters": {
          "type": "object",
          "properties": {
            "state": {
              "type": "object",
              "description": "Current state"
            }
          },
          "required": ["state"]
        },
        "implementation": "def gather_requirements(state):\n    # Create a prompt for the LLM to extract requirements\n    prompt = ChatPromptTemplate.from_messages([\n        SystemMessage(content=\"\"\"You are an AI assistant that helps extract event planning requirements from user messages. \nExtract any details about:\n1. Basic details: event type, title, description, attendee count, scale\n2. Timeline: start/end dates, key milestones, setup/teardown\n3. Budget: budget range, allocation priorities, payment timeline\n4. Location: geographic preferences, venue type, space requirements\n5. Stakeholders: key stakeholders, speakers, sponsors, VIPs\n6. Resources: equipment, staffing, service providers\n7. Success criteria: goals, KPIs, expected outcomes\n8. Risks: challenges, contingencies, insurance\n\nAlso determine which information categories have been sufficiently addressed.\"\"\"),\n        MessagesPlaceholder(variable_name=\"messages\"),\n        HumanMessage(content=\"\"\"Based on the conversation, extract the event requirements in JSON format with the following structure:\n{\n  \"event_details\": {\n    \"event_type\": null,\n    \"title\": null,\n    \"description\": null,\n    \"attendee_count\": null,\n    \"scale\": null\n  },\n  \"timeline\": {\n    \"start_date\": null,\n    \"end_date\": null,\n    \"key_milestones\": []\n  },\n  \"budget\": {\n    \"range\": null,\n    \"allocation_priorities\": []\n  },\n  \"location\": {\n    \"preferences\": [],\n    \"venue_type\": null,\n    \"space_requirements\": null\n  },\n  \"stakeholders\": [],\n  \"resources\": [],\n  \"success_criteria\": [],\n  \"risks\": [],\n  \"information_collected\": {\n    \"basic_details\": false,\n    \"timeline\": false,\n    \"budget\": false,\n    \"location\": false,\n    \"stakeholders\": false,\n    \"resources\": false,\n    \"success_criteria\": false,\n    \"risks\": false\n  }\n}\n\nFor each field, extract the information if available in the conversation. For the information_collected object, set a category to true only if sufficient information has been provided for that category.\n\"\"\")\n    ])\n    \n    # Initialize the LLM\n    llm = ChatOpenAI(api_key=OPENAI_API_KEY, model=LLM_MODEL, temperature=0.2)\n    \n    # Extract requirements using the LLM\n    chain = prompt | llm\n    result = chain.invoke({\"messages\": [{\"role\": m[\"role\"], \"content\": m[\"content\"]} for m in state[\"messages\"]]})\n    \n    # Parse the result\n    try:\n        import json\n        requirements_data = json.loads(result.content)\n        \n        # Update event details\n        if \"event_details\" in requirements_data:\n            for key, value in requirements_data[\"event_details\"].items():\n                if value is not None:\n                    state[\"event_details\"][key] = value\n        \n        # Update timeline\n        if \"timeline\" in requirements_data:\n            for key, value in requirements_data[\"timeline\"].items():\n                if value is not None:\n                    if key == \"start_date\":\n                        state[\"event_details\"][\"timeline_start\"] = value\n                    elif key == \"end_date\":\n                        state[\"event_details\"][\"timeline_end\"] = value\n                    else:\n                        state[\"event_details\"][key] = value\n        \n        # Update other requirements\n        for category in [\"stakeholders\", \"resources\", \"success_criteria\", \"risks\"]:\n            if category in requirements_data and requirements_data[category]:\n                state[\"requirements\"][category] = requirements_data[category]\n        \n        # Update budget and location in requirements if not already there\n        if \"budget\" in requirements_data and requirements_data[\"budget\"]:\n            if \"budget\" not in state[\"requirements\"]:\n                state[\"requirements\"][\"budget\"] = []\n            state[\"requirements\"][\"budget\"] = requirements_data[\"budget\"]\n        \n        if \"location\" in requirements_data and requirements_data[\"location\"]:\n            if \"location\" not in state[\"requirements\"]:\n                state[\"requirements\"][\"location\"] = []\n            state[\"requirements\"][\"location\"] = requirements_data[\"location\"]\n        \n        # Update information collected status\n        if \"information_collected\" in requirements_data:\n            for category, status in requirements_data[\"information_collected\"].items():\n                state[\"information_collected\"][category] = status\n        \n        # Update phase and next steps\n        state[\"current_phase\"] = \"information_collection\"\n        \n        # Check if all information has been collected\n        all_info_collected = all(state[\"information_collected\"].values())\n        if all_info_collected:\n            state[\"next_steps\"] = [\"generate_proposal\"]\n        else:\n            # Determine which information is still needed\n            missing_info = [category for category, collected in state[\"information_collected\"].items() if not collected]\n            state[\"next_steps\"] = [f\"collect_{category}_information\" for category in missing_info]\n        \n    except Exception as e:\n        # If parsing fails, add an error message (marked as ephemeral)\n        state[\"messages\"].append({\n            \"role\": \"system\",\n            \"content\": f\"Error extracting requirements: {str(e)}\",\n            \"ephemeral\": True\n        })\n    \n    return state"
      }
    },
    "generate_proposal": {
      "type": "function",
      "description": "Generate an event proposal based on collected information",
      "function": {
        "name": "generate_proposal",
        "description": "Generate an event proposal based on collected information",
        "parameters": {
          "type": "object",
          "properties": {
            "state": {
              "type": "object",
              "description": "Current state"
            }
          },
          "required": ["state"]
        },
        "implementation": "def generate_proposal(state):\n    # Create a prompt for the LLM to generate a proposal\n    prompt = ChatPromptTemplate.from_messages([\n        SystemMessage(content=\"\"\"You are an AI assistant that generates comprehensive event planning proposals. \nCreate a detailed, well-structured proposal based on the information collected about the event.\nThe proposal should include:\n1. Executive summary\n2. Detailed event description\n3. Timeline with milestones\n4. Budget breakdown\n5. Resource allocation plan\n6. Stakeholder management approach\n7. Risk management strategy\n8. Success metrics\n9. Next steps\n\nFormat the proposal with clear headings, bullet points where appropriate, and a professional tone.\"\"\"),\n        MessagesPlaceholder(variable_name=\"messages\"),\n        HumanMessage(content=f\"\"\"Event details: {state['event_details']}\nRequirements: {state['requirements']}\n\nGenerate a comprehensive event proposal based on this information. The proposal should be well-structured, detailed, and ready to present to stakeholders.\"\"\")\n    ])\n    \n    # Initialize the LLM\n    llm = ChatOpenAI(api_key=OPENAI_API_KEY, model=LLM_MODEL, temperature=0.2)\n    \n    # Generate proposal using the LLM\n    chain = prompt | llm\n    result = chain.invoke({\"messages\": [{\"role\": m[\"role\"], \"content\": m[\"content\"]} for m in state[\"messages\"]]})\n    \n    # Store the proposal in the state\n    state[\"proposal\"] = {\n        \"content\": result.content,\n        \"generated_at\": datetime.utcnow().isoformat(),\n        \"status\": \"pending_approval\"\n    }\n    \n    # Add the proposal to messages\n    state[\"messages\"].append({\n        \"role\": \"assistant\",\n        \"content\": f\"Based on the information collected, I've prepared the following event proposal:\\n\\n{result.content}\\n\\nPlease review this proposal and let me know if you'd like to make any changes or if you approve it to proceed with implementation.\"\n    })\n    \n    # Update phase and next steps\n    state[\"current_phase\"] = \"proposal_review\"\n    state[\"next_steps\"] = [\"await_proposal_approval\", \"make_proposal_revisions\"]\n    \n    return state"
      }
    },
    "delegate_tasks": {
      "type": "function",
      "description": "Delegate tasks to specialized agents",
      "function": {
        "name": "delegate_tasks",
        "description": "Delegate tasks to specialized agents",
        "parameters": {
          "type": "object",
          "properties": {
            "state": {
              "type": "object",
              "description": "Current state"
            }
          },
          "required": ["state"]
        },
        "implementation": "def delegate_tasks(state):\n    # Create a prompt for the LLM to determine task delegation\n    prompt = ChatPromptTemplate.from_messages([\n        SystemMessage(content=\"\"\"You are an AI assistant that helps delegate event planning tasks to specialized agents.\n            \nAvailable agents:\n- resource_planning: Handles venue selection, service providers, equipment\n- financial: Manages budget, payments, contracts\n- stakeholder_management: Coordinates sponsors, speakers, volunteers\n- marketing_communications: Manages campaigns, website, attendee communications\n- project_management: Tracks tasks, timeline, risks\n- analytics: Collects data, analyzes performance\n- compliance_security: Ensures legal requirements, security protocols\n\nBased on the event details, requirements, and approved proposal, determine which tasks should be delegated to which agents.\"\"\"),\n        MessagesPlaceholder(variable_name=\"messages\"),\n        HumanMessage(content=f\"\"\"Event details: {state['event_details']}\nRequirements: {state['requirements']}\nCurrent assignments: {state['agent_assignments']}\nProposal: {state['proposal']['content'] if 'proposal' in state else 'Not yet generated'}\n\nDetermine up to 5 new tasks that should be delegated to specialized agents. Return the result as a JSON array with objects containing 'agent_type' and 'task' fields.\"\"\")\n    ])\n    \n    # Initialize the LLM\n    llm = ChatOpenAI(api_key=OPENAI_API_KEY, model=LLM_MODEL, temperature=0.2)\n    \n    # Determine task delegation using the LLM\n    chain = prompt | llm\n    result = chain.invoke({\"messages\": [{\"role\": m[\"role\"], \"content\": m[\"content\"]} for m in state[\"messages\"]]})\n    \n    # Parse the result\n    try:\n        import json\n        delegation_data = json.loads(result.content)\n        \n        # Add new assignments\n        for assignment in delegation_data:\n            if isinstance(assignment, dict) and \"agent_type\" in assignment and \"task\" in assignment:\n                state[\"agent_assignments\"].append({\n                    \"agent_type\": assignment[\"agent_type\"],\n                    \"task\": assignment[\"task\"],\n                    \"status\": \"pending\",\n                    \"assigned_at\": datetime.utcnow().isoformat()\n                })\n        \n        # Update phase and next steps\n        state[\"current_phase\"] = \"implementation\"\n        state[\"next_steps\"] = [\"monitor_progress\", \"provide_status_update\"]\n        \n        # Add a message about the delegated tasks\n        task_summary = \"\\n\".join([f\"- Assigned to {a['agent_type']}: {a['task']}\" for a in state[\"agent_assignments\"]])\n        state[\"messages\"].append({\n            \"role\": \"assistant\",\n            \"content\": f\"I've delegated the following tasks to our specialized agents:\\n\\n{task_summary}\\n\\nI'll monitor their progress and provide regular updates.\"\n        })\n        \n    except Exception as e:\n        # If parsing fails, add an error message (marked as ephemeral)\n        state[\"messages\"].append({\n            \"role\": \"system\",\n            \"content\": f\"Error delegating tasks: {str(e)}\",\n            \"ephemeral\": True\n        })\n    \n    return state"
      }
    },
    "provide_status": {
      "type": "function",
      "description": "Provide status updates",
      "function": {
        "name": "provide_status",
        "description": "Provide status updates",
        "parameters": {
          "type": "object",
          "properties": {
            "state": {
              "type": "object",
              "description": "Current state"
            }
          },
          "required": ["state"]
        },
        "implementation": "def provide_status(state):\n    # Create a prompt for the LLM to generate a status report\n    prompt = ChatPromptTemplate.from_messages([\n        SystemMessage(content=\"You are an AI assistant that generates status reports for event planning. Create a concise but informative status update based on the current state of the event planning process.\"),\n        MessagesPlaceholder(variable_name=\"messages\"),\n        HumanMessage(content=f\"\"\"Event details: {state['event_details']}\nRequirements: {state['requirements']}\nAgent assignments: {state['agent_assignments']}\nCurrent phase: {state['current_phase']}\n\nGenerate a status report for the event planning process. Include progress on key tasks, upcoming milestones, and any issues that need attention.\"\"\")\n    ])\n    \n    # Initialize the LLM\n    llm = ChatOpenAI(api_key=OPENAI_API_KEY, model=LLM_MODEL, temperature=0.2)\n    \n    # Generate status report using the LLM\n    chain = prompt | llm\n    result = chain.invoke({\"messages\": [{\"role\": m[\"role\"], \"content\": m[\"content\"]} for m in state[\"messages\"]]})\n    \n    # Add the status report to messages\n    state[\"messages\"].append({\n        \"role\": \"assistant\",\n        \"content\": result.content\n    })\n    \n    # Update phase and next steps\n    state[\"current_phase\"] = \"status_reporting\"\n    state[\"next_steps\"] = [\"continue_monitoring\", \"address_issues\"]\n    \n    return state"
      }
    },
    "generate_response": {
      "type": "function",
      "description": "Generate a response to the user",
      "function": {
        "name": "generate_response",
        "description": "Generate a response to the user",
        "parameters": {
          "type": "object",
          "properties": {
            "state": {
              "type": "object",
              "description": "Current state"
            }
          },
          "required": ["state"]
        },
        "implementation": "def generate_response(state):\n    # Create the coordinator prompt\n    prompt = ChatPromptTemplate.from_messages([\n        SystemMessage(content=COORDINATOR_SYSTEM_PROMPT.format(\n            current_phase=state[\"current_phase\"],\n            event_details=state[\"event_details\"],\n            requirements=state[\"requirements\"],\n            agent_assignments=state[\"agent_assignments\"],\n            next_steps=state[\"next_steps\"],\n            information_collected=state[\"information_collected\"]\n        )),\n        MessagesPlaceholder(variable_name=\"messages\"),\n    ])\n    \n    # Initialize the LLM\n    llm = ChatOpenAI(api_key=OPENAI_API_KEY, model=LLM_MODEL, temperature=0.2)\n    \n    # Generate response using the LLM\n    chain = prompt | llm\n    result = chain.invoke({\"messages\": [{\"role\": m[\"role\"], \"content\": m[\"content\"]} for m in state[\"messages\"]]})\n    \n    # Add the response to messages\n    new_message = {\n        \"role\": \"assistant\",\n        \"content\": result.content\n    }\n    state[\"messages\"].append(new_message)\n    \n    return state"
      }
    },
    "tools": {
      "type": "tool",
      "description": "Tool node for event planning tools",
      "tools": [
        "RequirementsTool()",
        "DelegationTool()",
        "MonitoringTool()",
        "ReportingTool()"
      ]
    }
  },
  "edges": {
    "assess_request": {
      "type": "conditional",
      "condition": "lambda state: state[\"next_action\"]",
      "routes": {
        "gather_requirements": "gather_requirements",
        "generate_proposal": "generate_proposal",
        "delegate_tasks": "delegate_tasks",
        "provide_status": "provide_status",
        "generate_response": "generate_response"
      }
    },
    "gather_requirements": {
      "type": "direct",
      "target": "generate_response"
    },
    "generate_proposal": {
      "type": "direct",
      "target": "generate_response"
    },
    "delegate_tasks": {
      "type": "direct",
      "target": "generate_response"
    },
    "provide_status": {
      "type": "direct",
      "target": "generate_response"
    },
    "generate_response": {
      "type": "direct",
      "target": "END"
    }
  },
  "entry_point": "assess_request",
  "initial_state": {
    "messages": [],
    "event_details": {
      "event_type": null,
      "title": null,
      "description": null,
      "attendee_count": null,
      "scale": null,
      "timeline_start": null,
      "timeline_end": null
    },
    "requirements": {
      "stakeholders": [],
      "resources": [],
      "risks": [],
      "success_criteria": [],
      "budget": {},
      "location": {}
    },
    "agent_assignments": [],
    "current_phase": "information_collection",
    "next_steps": ["gather_event_details"],
    "proposal": null,
    "information_collected": {
      "basic_details": false,
      "timeline": false,
      "budget": false,
      "location": false,
      "stakeholders": false,
      "resources": false,
      "success_criteria": false,
      "risks": false
    }
  }
}
